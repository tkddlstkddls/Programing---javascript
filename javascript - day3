<스코프>

스코프는 참조 대상 식별자(identifier, 변수, 함수의 이름과 같이 어떤 대상을 다른 대상과 구분하여 식별할 수 있는 
유일한 이름)를 찾아내기 위한 규칙이다. 자바스크립트는 이 규칙대로 식별자를 찾는다.

자바스크립트는 C와 달리 블록 레벨스코프를 따르지 않는다. 하자만 자바스크립트는 함수 레벨 스코프를 따르는데,
함수 레벨 스코프란 함수 코드 블록 내에서 선언된 변수는 함수 코드 블록 내에서만 유효하고 함수 외부에서는 유요하지 않다는
것이다.

단, ECMAscript 6에서 도입된 let 키워드를 사용하면 블록 레벨 스코프를 사용할 수 있다.
var x = 0;
{
  var x = 1;
  console.log(x); // 1
}
console.log(x);   // 1

let y = 0;
{
  let y = 1;
  console.log(y); // 1
}
console.log(y);   // 0


- 비 블록 레벨 스코프

if (true) {
  var x = 5;
}
console.log(x);

변수 x는 코드블록 내에서 선언되었다. 하지만 자바스크립트는 블록 레벨 스코프를 사용 하지 않으므로, 전역 스코프를 갖게됨.

<strict mode>

function foo() {
  x = 10;
}

console.log(x); // ?

위 코드를 보자. foo 함수 내에서 선언되지도 않은 변수 x 에 10을 할당했다. 이때 자바스크립트 엔진은 먼저 foo 함수의
스코프에서 변수 x의 선언을 검색, 검색을 실패할 것이고, 전역 스코프에서도 변수 x의 선언이 존재하지 않으므로 
ReferenceError를 throw 할 것 같지만, 암묵적 전역 객체에 프로퍼티 x를 동적 생성함.
개발자의 의도와 상관없이 자바스크립트 엔진이 생성한 암묵적 전역 변수는 오류를 발생시키는 원인이 될 가능성이 큼.
strict mode 는 언어의 문법을 보다 엄격히 적용하여 명시적인 에러를 발생시킴.

- 적용법
전역의 선두 또는 함수 몸체의 선두에 'use strict';를 추가.
